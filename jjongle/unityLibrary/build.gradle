apply plugin: 'com.android.library'
// apply from: '../shared/keepUnitySymbols.gradle'

def unityStreamingAssets = ''

dependencies {
    api fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'androidx.core:core:1.9.0'
    implementation 'androidx.games:games-activity:3.0.5'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.games:games-frame-pacing:1.10.0'
}

android {
    namespace "com.unity3d.player"
    ndkVersion "27.2.12479018"

    compileSdk 35
    buildToolsVersion = "35.0.0"

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    defaultConfig {
        minSdk 24
        targetSdk 35

        ndk {
            abiFilters 'arm64-v8a'
            // 디버그 편의: symbol_table (필요시 'full')
            debugSymbolLevel 'symbol_table'
        }

        versionCode 1
        versionName '1.0'
        consumerProguardFiles 'proguard-unity.txt'

        externalNativeBuild {
            cmake {
                arguments "-DANDROID_STL=c++_shared", "-DANDROID_SUPPORT_FLEXIBLE_PAGE_SIZES=ON"
            }
        }
    }

    lint { abortOnError false }

    androidResources {
        noCompress = ['.unity3d', '.ress', '.resource', '.obb', '.bundle', '.unityexp'] + unityStreamingAssets.tokenize(', ')
        ignoreAssetsPattern = "!.svn:!.git:!.ds_store:!*.scc:!CVS:!thumbs.db:!picasa.ini:!*~"
    }

    packaging {
        jniLibs { useLegacyPackaging true }
    }
}

/* -------- 공용 유틸 -------- */
def getSdkDir() {
    Properties local = new Properties()
    local.load(new FileInputStream("${rootDir}/local.properties"))
    return local.getProperty('sdk.dir')
}
def GetIl2CppOutputPath(String workingDir, String abi) {
    return "${workingDir}/src/main/jniLibs/${abi}/libil2cpp.so"
}
def GetIl2CppSymbolPath(String workingDir, String abi) {
    return "${workingDir}/symbols/${abi}/libil2cpp.so"
}

/* -------- IL2CPP 빌드 실행 함수 (Unity가 내보낸 툴 사용) -------- */
def BuildIl2CppImpl(String workingDir, String configuration, String architecture, String abi, String[] staticLibraries) {
    def commandLineArgs = []
    commandLineArgs.add("--compile-cpp")
    commandLineArgs.add("--platform=Android")
    commandLineArgs.add("--architecture=${architecture}")          // 'arm64'
    commandLineArgs.add("--outputpath=${workingDir}/src/main/jniLibs/${abi}/libil2cpp.so")
    commandLineArgs.add("--baselib-directory=${workingDir}/src/main/jniStaticLibs/${abi}")
    commandLineArgs.add("--incremental-g-c-time-slice=3")
    commandLineArgs.add("--configuration=${configuration}")        // Release/Debug
    commandLineArgs.add("--dotnetprofile=unityaot-linux")
    commandLineArgs.add("--usymtool-path=${workingDir}/src/main/Il2CppOutputProject/usymtool")
    commandLineArgs.add("--profiler-report")
    commandLineArgs.add("--profiler-output-file=${workingDir}/build/il2cpp_${abi}_${configuration}/il2cpp_conv.traceevents")
    commandLineArgs.add("--print-command-line")
    commandLineArgs.add("--static-lib-il2-cpp")
    commandLineArgs.add("--data-folder=${workingDir}/src/main/Il2CppOutputProject/Source/il2cppOutput/data")
    commandLineArgs.add("--generatedcppdir=${workingDir}/src/main/Il2CppOutputProject/Source/il2cppOutput")
    commandLineArgs.add("--cachedirectory=${workingDir}/build/il2cpp_${abi}_${configuration}/il2cpp_cache")
    commandLineArgs.add("--tool-chain-path=${android.ndkDirectory}")

    staticLibraries.each { fileName ->
        commandLineArgs.add("--additional-libraries=${workingDir}/src/main/jniStaticLibs/${abi}/${fileName}")
    }

    def exeExt = ""
    if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
        exeExt = ".exe"
        commandLineArgs = commandLineArgs*.replace('\"', '\\\"')
    }

    // IL2CPP 실행
    exec {
        executable "${workingDir}/src/main/Il2CppOutputProject/IL2CPP/build/deploy/il2cpp${exeExt}"
        args commandLineArgs
        environment "ANDROID_SDK_ROOT", getSdkDir()
    }

    // Unity의 debugSymbolLevel에 따라 .dbg.so 또는 .sym.so 생성됨
    def dbgLevel = project.android.defaultConfig.ndk.debugSymbolLevel
    def usePublicSymbols = (dbgLevel == null || !dbgLevel.toString().toLowerCase().equals("full"))
    def extensionToRemove = usePublicSymbols ? ".dbg.so" : ".sym.so"
    def extensionToKeep   = usePublicSymbols ? ".sym.so" : ".dbg.so"

    // jniLibs에는 정식 so만, symbols 디렉토리엔 디버그 심볼 보관
    delete "${workingDir}/src/main/jniLibs/${abi}/libil2cpp${extensionToRemove}"
    ant.move(
            file: "${workingDir}/src/main/jniLibs/${abi}/libil2cpp${extensionToKeep}",
            tofile: "${workingDir}/symbols/${abi}/libil2cpp.so"
    )
}

/* -------- IL2CPP 빌드 태스크 -------- */
android {
    tasks.register('buildIl2Cpp') {
        def workingDir = projectDir.toString().replaceAll('\\\\', '/')
        def archs = [
                // 'armv7': 'armeabi-v7a', // 필요 시 추가
                'arm64': 'arm64-v8a'
        ]
        def staticLibs = [
                // 'armv7': [ ],
                'arm64': [ ]
        ]

        inputs.files fileTree(dir: 'src/main/Il2CppOutputProject', include: ['**/*'])
        inputs.files fileTree(dir: 'src/main/jniStaticLibs',     include: ['**/*'])
        archs.each { arch, abi ->
            outputs.file GetIl2CppOutputPath(workingDir, abi)
            outputs.file GetIl2CppSymbolPath(workingDir, abi)
        }

        doLast {
            archs.each { arch, abi ->
                BuildIl2CppImpl(workingDir, 'Release', arch, abi, staticLibs[arch] as String[])
            }
        }
    }

    // merge* 전에 libil2cpp.so가 반드시 만들어지도록 의존성 연결
    afterEvaluate {
        if (project(':unityLibrary').tasks.findByName('mergeDebugJniLibFolders'))
            project(':unityLibrary').mergeDebugJniLibFolders.dependsOn buildIl2Cpp
        if (project(':unityLibrary').tasks.findByName('mergeReleaseJniLibFolders'))
            project(':unityLibrary').mergeReleaseJniLibFolders.dependsOn buildIl2Cpp
    }

    sourceSets {
        main {
            jni.srcDirs = ["src/main/Il2CppOutputProject"]
        }
    }
}

/* -------- (네가 추가한) 심볼 수집 태스크 유지 -------- */
tasks.register('collectIl2CppSymbols') {
    doLast {
        def srcDir = file("$projectDir/src/main/jniLibs/arm64-v8a")
        def outDir = file("$projectDir/symbols/arm64-v8a")
        outDir.mkdirs()

        def dbg = new File(srcDir, "libil2cpp.dbg.so")
        def sym = new File(srcDir, "libil2cpp.sym.so")
        def picked = dbg.exists() ? dbg : (sym.exists() ? sym : null)

        if (picked != null) {
            copy {
                from picked
                into outDir
                rename { "libil2cpp.dbg.so" }
            }
            println "Collected IL2CPP symbols: ${picked.name} → ${outDir}/libil2cpp.dbg.so"
        } else {
            println "No IL2CPP symbol file found in ${srcDir} (dbg/sym). Skipping."
        }
    }
}

afterEvaluate {
    tasks.matching { it.name in ["mergeDebugJniLibFolders", "mergeReleaseJniLibFolders"] }
            .all { it.finalizedBy(collectIl2CppSymbols) }
}

android.externalNativeBuild {
    cmake {
        version "3.22.1"
        path "src/main/cpp/CMakeLists.txt"
    }
}
android.buildFeatures { prefab true }
//tasks.matching { it.name == "buildIl2Cpp" }.all { enabled = false }